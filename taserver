#!/usr/bin/perl

BEGIN {
    if(my($dir) = $0 =~ m/^(.+)\/[^\/]+$/) {
        eval "use lib \"$dir/lib\"";
        chdir $dir;
    }
}

use strict;
use warnings;

use threads;
use threads::shared;
use Thread::Queue;

use File::Basename;
use Socket;
use IO::Socket;
use IO::Socket::INET;
use IO::Select;

use Thundaural::Server::Settings;
use Thundaural::Logger qw(logger);
use Thundaural::Server::ServerCommands;
use Thundaural::Server::Player;
use Thundaural::Server::Reader;
use Thundaural::Server::Periodic;
use Thundaural::Server::Threads;

use Thundaural::Server::DatabaseSetup;

use POSIX qw/setsid/;

use DBI;

my $storagedir = Thundaural::Server::Settings::storagedir();
{
        local $Thundaural::Logger::showcaller = 0;
        my $createdb = Thundaural::Server::Settings::createdb();
        my $c = Thundaural::Server::Settings::convert();
        Thundaural::Logger::init(($c||$createdb) ? 'stderr' : Thundaural::Server::Settings::logto());
        Thundaural::Server::DatabaseSetup::init(
        	dbfile=>Thundaural::Server::Settings::dbfile(),
        	storagedir=>$storagedir
        );
        &do_conversions() if ($c);
        exit if ($createdb);
}

if (!Thundaural::Server::Settings::foreground()) {
	open STDIN, '</dev/null' or die("can't read /dev/null: $!\n");
	open STDOUT, '>>/dev/null' or die("can't write to /dev/null: $!\n");
	open STDERR, '>>/dev/null' or die("can't write to /dev/null: $!\n");
	defined(my $pid = fork) or die("can't fork: $!\n");
	exit if ($pid);
	setsid or die("can't set new session: $!\n");
	umask 0022;
}

our $run : shared = 1;

my $dblock : shared = 0xfef1f0fa;

my $playerthrs = Thundaural::Server::Threads::start_players(\$dblock);
my $readerthrs = Thundaural::Server::Threads::start_readers(\$dblock);
my($periodic, $periodicthr) = Thundaural::Server::Threads::start_periodic(\$dblock);;

sleep 1; # give everything a chance to initialize

my $listener = new IO::Socket::INET(Listen => 5, 
				LocalAddr=>Thundaural::Server::Settings::listenhost(), 
				LocalPort=>Thundaural::Server::Settings::listenport(), 
				Proto=>'tcp',
				ReuseAddr => 1)
	or die("$0: can't bind: $@\n");
logger('now listening on %s:%s', $listener->sockhost(), $listener->sockport());

$0 = "thundaural-server(thread)";
my $serverthr = threads->new(\&server);
$serverthr->join;
undef $serverthr;

exit;

sub server {
	my $cmdhandler = new Thundaural::Server::ServerCommands(
				-readerthrs=>$readerthrs,
				-playerthrs=>$playerthrs,
				-periodic=>$periodic,
				-ref_dblock=>\$dblock, 
			);

	my $selreaders = new IO::Select($listener);
	my $selwriters = new IO::Select();
	my $connections = {};
	my $pendingwrites = {};
	my $lastmsg = '';
	my $lastname = '';
	my $lastcount = 0;

	$connections->{server} = {peername=>'jukebox', name=>'jukebox', connectedat=>time()};

	READLOOP:
	while(1) {
		my ($rs, $ws, $es) = IO::Select->select($selreaders, $selwriters, undef, 0.5);
		foreach my $fh (@$ws) {
			my $line = shift @{$pendingwrites->{$fh}};
			print $fh $line if ($line);
			if (!(scalar @{$pendingwrites->{$fh}})) {
				$selwriters->remove($fh);
			}
		}
		foreach my $fh (@$rs) {
			if ($fh == $listener) {
				my $newsock = $listener->accept();
				my $peer = $newsock->peerhost().":".$newsock->peerport();
				logger("connection from $peer");
				$selreaders->add($newsock);
				$connections->{$newsock} = {peername=>$peer, name=>$peer, connectedat=>time()};
			} else {
				my $input = <$fh>;
				my $discon = 0;
				if (defined($input)) {
					$input =~ s/\r?\n$//;
					$input = ('noop '.time()) if ($input =~ m/^$/);

					# unfortuantely, some commands can't be implemented in ServerCommands.pm
					if ($input =~ m/^shut/) {
						logger('shutdown requested by %s (%s)', 
							$connections->{$fh}->{name},
							$connections->{$fh}->{peername});
						last READLOOP;
					}

					# the following if was added to test player/reader thread restarting upon death
					# it will eventually be removed
#					if ($input =~ m/^exit (\w+)$/) {
#						my $dv = $1;
#						if (exists($playerthrs->{$dv})) {
#							$playerthrs->{$dv}->{-object}->cmdqueue()->enqueue('abort');
#							# get the player thread to exit
#							$playerthrs->{$dv}->{-object}->cmdqueue()->enqueue(undef); 
#							print $fh "200 told $dv to abort\n";
#						} else {
#							print $fh "300 unknown play device $dv\n";
#						}
#						next;
#					}

					my ($result, $output) = eval { $cmdhandler->process($input, $fh, $connections); };
					logger($@, 'server') if ($@);
					if (ref($output) ne 'ARRAY') {
						$output = [$output];
					}
					$discon = 1 if (!$result);
					my $outputlines = scalar @$output;
					$connections->{$fh}->{inputs} += 1;
					$connections->{$fh}->{outputs} += $outputlines;
					my $msg = sprintf("%5d %4d \"%s\"", $result, $outputlines, $input);
                    if ($input !~ m/^(queued|status)$/) {
					    if ($msg eq $lastmsg && $connections->{$fh}->{name} eq $lastname) {
						    $lastcount++;
					    } else {
						    if ($lastcount) {
							    logger("last message repeated $lastcount times", $lastname);
						    }
						    logger($msg, $connections->{$fh}->{name});
						    $lastmsg = $msg;
						    $lastname = $connections->{$fh}->{name};
						    $lastcount = 0;
					    }
                    }
					if ($outputlines) {
						push(@{$pendingwrites->{$fh}}, @$output);
						$selwriters->add($fh);
					}
				}
				if (!defined($input) || $discon) {
					if ($lastcount) {
						logger("last message repeated $lastcount times", $lastname);
						$lastmsg = '';
						$lastname = '';
						$lastcount = 0;
					}
					logger("disconnecting from ".$connections->{$fh}->{name});
					delete($connections->{$fh});
					delete $pendingwrites->{$fh};
					$selreaders->remove($fh);
					$selwriters->remove($fh);
					close($fh);
				}
			}
		}

		# remove from the select call any writers that no longer have pending output
		foreach my $p (keys %$pendingwrites) {
			my $amt = scalar @{$pendingwrites->{$p}};
			if (!$amt) { $selwriters->remove($p); }
		}

		# respawn dead player threads
#		foreach my $dv (keys %$playerthrs) {
#			if (! ${$playerthrs->{$dv}->{-running}}) {
#				logger("player thread for $dv seems to have died, creating new");
#				$playerthrs->{$dv}->{-thread}->join();
#				$playerthrs->{$dv} = &spawn_player_thread($dv);
#			}
#		}

		# respawn dead reader threads
		foreach my $dv (keys %$readerthrs) {
			if (! ${$readerthrs->{$dv}->{-running}}) {
				logger("reader thread for $dv seems to have died, creating new");
				$readerthrs->{$dv}->{-thread}->join();
				$readerthrs->{$dv} = Thundaural::Server::Threads::spawn_reader($dv, \$dblock);
			}
		}

		# commands have been pushed in to the queue that won't be used
		# avoid filling up memory with these commands
	#	foreach my $dv (keys %$playerthrs) {
	#		my $c = 0;
	#		my $pvo = $playerthrs->{$dv}->{-object};
	#		while(${$pvo->state()} eq 'idle' && $pvo->cmdqueue()->pending()) { 
	#			my $x = $pvo->cmdqueue()->dequeue(); 
	#			logger("   $dv: removed \"$x\"", 'mainloop');
	#			$c++;
	#		} 
	#		logger("cleared $dv player command queue of $c entries", 'mainloop') if ($c);
	#	}
	}
	$run = 0;

	foreach my $dv (keys %$playerthrs) {
		$playerthrs->{$dv}->{-object}->cmdqueue()->enqueue('abort');
		$playerthrs->{$dv}->{-object}->cmdqueue()->enqueue(undef); # get the player thread to exit
		$playerthrs->{$dv}->{-thread}->join();
		#threads->yield();
	}
	foreach my $dv (keys %$readerthrs) {
		$readerthrs->{$dv}->{-object}->cmdqueue()->enqueue('abort');
		$readerthrs->{$dv}->{-object}->cmdqueue()->enqueue(undef); # get the reader thread to exit
		$readerthrs->{$dv}->{-thread}->join();
		#threads->yield();
	}
	foreach my $fh (keys %$connections) {
		next if ($fh eq 'server');
		logger("shutdown, closing ".$connections->{$fh}->{name});
		close($fh);
	}
	close($listener);

	sleep 2; # wait for other threads to exit
	threads->yield();
}

sub ripping_active {
    my $c = 0;
    foreach my $dev (keys %$readerthrs) {
        my $s = $readerthrs->{$dev}->{-object}->state();
        $c++ if (defined($s) && $s ne 'idle');
    }
    return $c;
}

sub do_conversions {
	my $c = Thundaural::Server::Settings::convert();
	return if (!$c);

	my($what, $opts) = split(/:/, $c);
	my @opts = split(/;/, $opts || '');
	my %o = ();
	foreach my $x (@opts) {
		my($k, $v) = split(/=/, $x);
		$o{$k} = $v;
	}
	if ($what eq 'tracknumtags') {
		Thundaural::Server::DatabaseSetup::tag_files_with_tracknum(%o);
		exit;
        }
	die("$0: unknown conversion \"$what\"\n");
}

#    Thundaural Jukebox
#    Copyright (C) 2003-2005  Andrew A. Bakun
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
